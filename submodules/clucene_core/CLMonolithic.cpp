/*------------------------------------------------------------------------------
* Copyright (C) 2003-2006 Ben van Klinken and the CLucene Team
*
* Distributable under the terms of either the Apache License (Version 2.0) or
* the GNU Lesser General Public License, as specified in the COPYING file.
------------------------------------------------------------------------------*/
/*
 * this is a monolithic file that can be used to compile clucene using one
 * source file. it simplifies some build processes by avoiding static & dynamic
 * compalation pitfalls.
 *
 * note: when creating a project add either this file, or all the other .cpp
 * files, not both!
 */
#include "StdHeader.cpp"
#include "debug/error.cpp"
#include "analysis/Analyzers.cpp"
#include "analysis/AnalysisHeader.cpp"
#include "analysis/standard/StandardAnalyzer.cpp"
#include "analysis/standard/StandardFilter.cpp"
#include "analysis/standard/StandardTokenizer.cpp"
#include "analysis/standard/test_head.cpp"
#include "document/DateField.cpp"
#include "document/DateTools.cpp"
#include "document/Document.cpp"
#include "document/FieldSelector.cpp"
#include "document/NumberTools.cpp"
#include "document/Field.cpp"
#include "index/CompoundFile.cpp"
#include "index/DirectoryIndexReader.cpp"
#include "index/DocumentsWriter.cpp"
#include "index/DocumentsWriterThreadState.cpp"
#include "index/FieldInfos.cpp"
#include "index/FieldsReader.cpp"
#include "index/FieldsWriter.cpp"
#include "index/IndexDeletionPolicy.cpp"
#include "index/IndexFileDeleter.cpp"
#include "index/IndexFileNameFilter.cpp"
#include "index/IndexFileNames.cpp"
#include "index/IndexModifier.cpp"
#include "index/IndexWriter.cpp"
#include "index/IndexReader.cpp"
#include "index/MergePolicy.cpp"
#include "index/MergeScheduler.cpp"
#include "index/MultipleTermPositions.cpp"
#include "index/MultiReader.cpp"
#include "index/MultiSegmentReader.cpp"
#include "index/Payload.cpp"
#include "index/SegmentInfos.cpp"
#include "index/SegmentMergeInfo.cpp"
#include "index/SegmentMergeQueue.cpp"
#include "index/SegmentMerger.cpp"
#include "index/SegmentReader.cpp"
#include "index/SegmentTermDocs.cpp"
#include "index/SegmentTermEnum.cpp"
#include "index/SegmentTermPositions.cpp"
#include "index/SegmentTermVector.cpp"
#include "index/SkipListReader.cpp"
#include "index/SkipListWriter.cpp"
#include "index/Term.cpp"
#include "index/Terms.cpp"
#include "index/TermInfo.cpp"
#include "index/TermInfosReader.cpp"
#include "index/TermInfosWriter.cpp"
#include "index/TermVectorReader.cpp"
#include "index/TermVectorWriter.cpp"
#include "queryParser/FastCharStream.cpp"
#include "queryParser/QueryParserTokenManager.cpp"
#include "queryParser/MultiFieldQueryParser.cpp"
#include "queryParser/QueryParser.cpp"
#include "queryParser/QueryToken.cpp"
#include "search/BooleanQuery.cpp"
#include "search/BooleanScorer.cpp"
#include "search/BooleanScorer2.cpp"
#include "search/CachingWrapperFilter.cpp"
#include "search/ChainedFilter.cpp"
#include "search/Compare.cpp"
#include "search/ConstantScoreQuery.cpp"
#include "search/DateFilter.cpp"
#include "search/ConjunctionScorer.cpp"
#include "search/DisjunctionSumScorer.cpp"
#include "search/ExactPhraseScorer.cpp"
#include "search/Explanation.cpp"
#include "search/FieldCache.cpp"
#include "search/FieldCacheImpl.cpp"
#include "search/FieldDocSortedHitQueue.cpp"
#include "search/FieldSortedHitQueue.cpp"
#include "search/FilteredTermEnum.cpp"
#include "search/FuzzyQuery.cpp"
#include "search/Hits.cpp"
#include "search/HitQueue.cpp"
#include "search/IndexSearcher.cpp"
#include "search/MatchAllDocsQuery.cpp"
#include "search/MultiSearcher.cpp"
#include "search/MultiTermQuery.cpp"
#include "search/MultiPhraseQuery.cpp"
#include "search/PhrasePositions.cpp"
#include "search/PhraseQuery.cpp"
#include "search/PhraseScorer.cpp"
#include "search/PrefixQuery.cpp"
#include "search/QueryFilter.cpp"
#include "search/RangeQuery.cpp"
#include "search/RangeFilter.cpp"
#include "search/SearchHeader.cpp"
#include "search/Similarity.cpp"
#include "search/SloppyPhraseScorer.cpp"
#include "search/Scorer.cpp"
#include "search/ScorerDocQueue.cpp"
#include "search/Sort.cpp"
#include "search/TermQuery.cpp"
#include "search/TermScorer.cpp"
#include "search/WildcardQuery.cpp"
#include "search/WildcardTermEnum.cpp"
#include "store/FSDirectory.cpp"
#include "store/IndexInput.cpp"
#include "store/Lock.cpp"
#include "store/LockFactory.cpp"
#include "store/MMapInput.cpp"
#include "store/IndexOutput.cpp"
#include "store/Directory.cpp"
#include "store/RAMDirectory.cpp"
#include "util/BitSet.cpp"
#include "util/Equators.cpp"
#include "util/FastCharStream.cpp"
#include "util/MD5Digester.cpp"
#include "util/Reader.cpp"
#include "util/StringIntern.cpp"
#include "util/ThreadLocal.cpp"

#include "shared/CLSharedMonolithic.cpp"
